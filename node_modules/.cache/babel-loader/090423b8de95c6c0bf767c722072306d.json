{"ast":null,"code":"var _jsxFileName = \"/Users/mburnett/dev/jeopardy/src/Board.js\";\nimport React from 'react';\nimport Column from './Column';\n\nfunction Board(props) {\n  let topics = props.questionData.topics;\n  let questions = props.questionData.questions;\n  return React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, topics.map(topic => {\n    let topicQuestions = getTopicQuestions(topic, questions);\n    return React.createElement(Column, {\n      topic: topic,\n      questions: topicQuestions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    });\n  }));\n}\n\nfunction getTopicQuestions(topic, questions) {\n  return questions.filter(question => question.topic === topic);\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/mburnett/dev/jeopardy/src/Board.js"],"names":["React","Column","Board","props","topics","questionData","questions","map","topic","topicQuestions","getTopicQuestions","filter","question"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAElB,MAAIC,MAAM,GAAGD,KAAK,CAACE,YAAN,CAAmBD,MAAhC;AACA,MAAIE,SAAS,GAAGH,KAAK,CAACE,YAAN,CAAmBC,SAAnC;AAEA,SACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQF,MAAM,CAACG,GAAP,CAAWC,KAAK,IAAI;AAChB,QAAIC,cAAc,GAAGC,iBAAiB,CAACF,KAAD,EAAQF,SAAR,CAAtC;AAEA,WACI,oBAAC,MAAD;AACI,MAAA,KAAK,EAAEE,KADX;AAEI,MAAA,SAAS,EAAEC,cAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH,GATD,CAFR,CADJ;AAgBH;;AAED,SAASC,iBAAT,CAA2BF,KAA3B,EAAkCF,SAAlC,EAA6C;AACzC,SAAOA,SAAS,CAACK,MAAV,CAAiBC,QAAQ,IAAIA,QAAQ,CAACJ,KAAT,KAAmBA,KAAhD,CAAP;AACH;;AAED,eAAeN,KAAf","sourcesContent":["import React from 'react';\nimport Column from './Column';\n\nfunction Board(props) {\n\n    let topics = props.questionData.topics;\n    let questions = props.questionData.questions;\n\n    return(\n        <div className='board'>\n            {\n                topics.map(topic => {\n                    let topicQuestions = getTopicQuestions(topic, questions);\n\n                    return (\n                        <Column\n                            topic={topic}\n                            questions={topicQuestions}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nfunction getTopicQuestions(topic, questions) {\n    return questions.filter(question => question.topic === topic);\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}